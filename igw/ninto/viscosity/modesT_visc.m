
                %%%%%%%%%%%%%%%%%%%%%%
                % TEST GRAVITY WAVES %
                %    cas visqueux    %
                %%%%%%%%%%%%%%%%%%%%%%

% pour le moment, il n'y a pas distinction entre les deux axes horizontaux,
% c'est du 3D planaire disons :)

% {{{ preprocessing

clear all;
close all;

% enable viscosity?
has_viscosity = 0;

% modele1:
%   altitude (0 - 500km)
%   densité
%   dérivée de la densité
%   dérivée du logarithme de la densité
load modele1


%Z = RHOout(:,1);
%Z       = modele1(:,1);
%nnn     = max(size(Z));     % 9999 (1D)
%rho     = modele1(:,2);
%drho    = modele1(:,3);
%dlgrho  = modele1(:,4);

% tests à plus basse résolution
res     = 10;
binf    = 1;
bsup    = 9999;
Z       = modele1(binf:res:bsup,1);
rho     = modele1(binf:res:bsup,2);
drho    = modele1(binf:res:bsup,3);
dlgrho  = modele1(binf:res:bsup,4);

xx         = size(Z);       % 9999
n_mod      = xx(1);         % 9999 le nombre de modes (autant que de tranches
% d'altitudes ?)
I(1:n_mod) = 1;

% calcul de la dérivée spatiale verticale ?
for j = 1:n_mod-1
    dz(j) = (Z(j+1)-Z(j))*1.e3;     % pas spatial en mètres, utilisé dans les
    % dérivées en dz j'imagine
end
dz(n_mod) = dz(n_mod-1);          % FIXME ajouté pour la version vectorisée, bof

dz = dz';

% conditions limites sur la vitesse horizontale : pour le calcul du gradient de vent
u0b = 0;      % vitesse en bas  (bottom)
u0t = 0;      % vitesse en haut (top)
% coefficient d'un gradient linéaire des vents égal à d(u0)/dz
alpha = (u0t-u0b)/((Z(n_mod)-Z(1))*1.e3);
% FIXME gruik pour le gradient linéaire
alpha_local = alpha.*ones(n_mod,1);
% profil des vitesses moyennes
u0 = Z.*(1.e3*alpha) + u0b;

M = 5.9768e+24;     % masse de la Terre
G = 6.67e-11;       % constante gravitationnelle
R = 6378.e3;        % rayon de la Terre

%----------------------------------
%   omega, kx & ky à la main
%----------------------------------

T  = [50 100 150]*60    % trois périodes de temps (s) : 3000, 6000, 9000 secondes
%T  = [10 20 30]*60
wn = 2*pi./T;           % les trois fréquences associées...

h  = 2500;              % hauteur de l'océan
g  = 9.8;
c  = sqrt(g*h);         % vitesse de phase des ondes acoustiques simples
kx = wn/c;              % nombres d'ondes horizontaux
ky = kx;                % .

%----------------------------------
% itérateurs spatio-temporels

nlat = max(size(ky));   % en fait, on a fait en sorte que nlon = nlat...
nlon = max(size(kx));
nt   = max(size(wn));

%----------------------------------
if has_viscosity
    % viscosité cinématique
    % FIXME à récupérer comme data du modèle d'atmosphère
    visc = 1.3e-5; % valeur moyenne pour commencer
end

%----------------------------------
% bibliothèques

load BestView2

% }}}

% {{{ résolution en différences finies

% {{{ boucle sur les nombres d'onde
% (sur les longeurs d'onde, ici trois)
% une figure par mode ik pour le Hwater(kx)
for ik = 1:nlon % (nlon-1)/2 + 2:nlon
    
    ik
    k    = kx(ik);          % nombre d'onde horizontal courant
    
    %drawnow;        % DRAWNOW causes figure windows and their children to update and
                    %% flushes the system event queue. Any callbacks generated by incoming
                    %% events - e.g. mouse or key events - will be dispatched before
                    %% DRAWNOW returns.

    %figure(2*ik);   % FIGURE(H) makes H the current figure,  forces it to become visible,
                    %% and raises it above all other figures on the screen.  If Figure H
                    %% does not exist,  and H is an integer,  a new figure is created with
                    %% handle H.

    %set(2*ik, 'position', [44   250   500   750]);
    %set(gcf, 'Color', 'w');
    %set(gca, 'LineWidth', [2])
    %set(gca, 'fontsize', 18);
    %view(VV);
    %title(['Hwater = ', num2str(h), 'm and kx = ',  num2str(k), ' rad/m'], 'fontsize', 18);
    %%     xlabel('omega w (rad/s)', 'fontsize', 18);
    %xlabel('period T (min)', 'fontsize', 18);
    %ylabel('Vertical V_r_e_a_l (m/s)', 'fontsize', 18);
    %zlabel('altitude (km)', 'fontsize', 18);
    %grid on;
    %hold on;

    %figure(2*ik+1);
    %set(2*ik+1, 'position', [44   250   500   750]);
    %set(gcf, 'Color', 'w');
    %set(gca, 'LineWidth', [2])
    %set(gca, 'fontsize', 18);
    %view(VV);
    %title(['Hwater = ', num2str(h), 'm   and   kx = ',  num2str(k), ' rad/m'], 'fontsize', 18);
    %%    xlabel('omega (rad/s)', 'fontsize', 18);
    %xlabel('period T (min)', 'fontsize', 18);
    %ylabel('Vertical V_i_m_a_g (m/s)', 'fontsize', 18);
    %zlabel('altitude (km)', 'fontsize', 18);
    %grid on;
    %hold on;

    % }}}
    
    % {{{ boucle sur les trois fréquences par mode
    %     sachant qu'un mode est une altitude ici
    for iw = 1:nt %(nt-1)/2 + 2:nt 
        % avec nt = max(size(wn)) == 3 ici

        % {{{ constantes et utilitaires

        N2         = -g.*dlgrho;
        N2over2g   = (N2./(2*g)).^2;
        omega      = wn(iw)
        BigOmega   = omega - k.*u0;                % FIXME k à vectoriser quand je passerai en full 3D
        kxy2       = k^2;                          % FIXME no full 3D
        phase      = k - omega;                    % (pas unitaires) FIXME à modifier pour la full 3D
        expniphase = exp(-i*phase);                % FIXME vérifier cette formule
        kz2        = k.*k.*(N2./omega./omega - 1) - N2over2g;

        % }}}

        % {{{ conditions initiales

        % TODO pour les conditions initiales :
        % il est compliqué de propager directement en visqueux car il faut deux conditions
        % initiales. Pour palier ce problème, sous l'hypothèse que la viscosité joue un très
        % faible rôle sur les premiers kilomètres de propagation verticale, on commencera
        % la propagation en utilisant le propagateur non visqueux, puis la version visqueuse
        % prendra le relai. Il faudra déterminer à quelle altitude on fait cette transition.
        % On peut aussi faire tout en visqueux sauf les deux premiers pas, mais dans l'idée,
        % il est intéressant de ne pas considérer la viscosité aussi longtemps que possible,
        % car les calculs sont plus coûteux.

        % {{{ première condition initiale ; détermination du type d'onde
        for j = 1:1

            % C.I.1 perturbations verticale et de pression
            % on se donne une perturbation unitaire, dans l'optique de l'étude des modes
            w1   = complex(1,0);
            w(j) = w1;

            % C.I.1 densité
            % FIXME je trouve un facteur 1/rho0 pour rho1
            rho1(j) = -i/BigOmega(j)*dlgrho(j)*w(j);

            % calcul de la pression initiale sous une contrainte de continuité à l'interface
            if N2(j) >= omega*omega
                % cas d'une onde propagative
                p(j) = i/(k*k)*(alpha*k - i*sqrt(kz2(j))*(omega - k*u0(1)) - 0.5*(omega - k*u0(j))*dlgrho(j))*w1;
            else
                % cas d'une onde non propagative
                p(j) = i/(k*k)*(alpha*k -   sqrt(kz2(j))*(omega - k*u0(j)) - 0.5*(omega - k*u0(j))*dlgrho(j))*w1;
            end

            % C.I.1 perturbation horizontale
            % FIXME je trouve un facteur 1/rho0 pour u(j)
            u(j)   = 1/BigOmega(j) * (k*p(j) - i*alpha*w(j));
            %v(j)   = u(j);

            if has_viscosity
                w_diff(j) = 0; u_diff(j) = 0; p_diff(j) = 0; rho1_diff(j) = 0;
            end

        end % première condition intiale }}}

        % {{{ seconde condition initiale pour l'ordre 2
        for j = 2:2

            % idée : prendre les dérivées premières
            % pour les perturbations, on peut considérer que leurs accélérations sont nulles
            % i.e. utiliser des conditions de Dirichlet homogènes
            %u(j) = 0;
            %v(j) = 0;    % FIXME no full 3D

            % on utilise le propagateur non visqueux au premier ordre pour initier le calcul
            % FIXME dans l'idée, on l'utilisera aussi après, tant que la viscosité
            % est négligeable : ça diminue le coût en calcul :)
            w(j)    = -i*k*u(j-1)*dz(j-1) + 0.5*dlgrho(j-1)*dz(j-1)*w(j-1) + w(j-1);

            p(j)    = i*BigOmega(j-1)*dz(j-1)*w(j-1) - 0.5*dlgrho(j-1)*dz(j-1)*p(j-1) - rho1(j-1)*dz(j-1)*g + p(j-1);

            u(j)    =  1/BigOmega(j)*(-i*w(j)*alpha + k*p(j));

            rho1(j) = -i/BigOmega(j)*dlgrho(j)*w(j);

            if has_viscosity
                w_diff(j) = 0; u_diff(j) = 0; p_diff(j) = 0; rho1_diff(j) = 0;
            end

        end
        % seconde condition initiale }}}
        
        % conditions initiales }}}

        % {{{ propagation verticale
        for j = 3:n_mod
            
            % {{{
            % cas visqueux, en plusieurs étapes :
            % 1. calcul des perturbations horizontales u(j) et v(j)
            % 2. calcul du nouveau w(j) en fonction de u(j) et v(j)
            % 3. calcul du nouveau p(j) en fonction de w(j)
            
            % calcul des perturbations horizontales
            % avec (1) et (2)
            %u(j) = 2*u(j-1) ...
            %     - u(j-2) ...
            %     - dz(j-1)^2 * ...
            %       ( (1/visc) * (i*BigOmega(j) * u(j-1) - w(j-1) * ((u0(j) - u0(j-2))/(2*dz(j-1))) - (1/rho(j-1))*(i*k*p(j-1))) ...
            %         - kxy2 * u(j-1) ...
            %         + expniphase * (u0(j) - 2*u0(j-1) + u0(j-2))/(dz(j-1)^2) );

            % FIXME commenté pour le moment, 3D == 2D avec une seule dimension horizontale pour le moment
            % si réintégré, check le facteur alpha qui est 1D pour le moment
            %v(j) = 2*v(j-1) ...
            %    - v(j-2) ...
            %    - dz(j-1)^2 * ...
            %      ( (1/visc) * (i*BigOmega(j) * v(j-1) - w(j-1) * ((v0(j) - v0(j-2))/(2*dz(j-1))) - (1/rho(j-1))*(i*kx*p(j-1))) ...
            %        - kxy2 * v(j-1) ...
            %        + expniphase * (v0(j) - 2*v0(j-1) + v0(j-2))/(dz(j-1)^2) );
            
            % calcul de la perturbation verticale
            % avec (1), (2) et (4) 
            %BigOmegaVisc = (BigOmega(j-1) + i*visc*kxy2);
            %w(j) = w(j-1)*(dz(j-1)*dlgrho(j-1) - (2*dz(j-1)*k*alpha)/BigOmegaVisc) ...
            %     - w(j-2) ...
            %     - 2*dz(j-1)*((1/BigOmegaVisc)*(i*kxy2 + visc*sqrt(rho(j-1))*( ... 
            %       k*( (u(j) - 2*u(j-1) + u(j-2))/(dz(j-1)^2) + expniphase*((u0(j) - 2*u0(j-1) + u0(j-2))/(dz(j-1)^2)) ))));
                   %+ ky*( (v(j) - 2*v(j-1) + v(j-2))/(dz(j-1)^2) + expniphase*((v0(j) - 2*v0(j-1) + v0(j-2))/(dz(j-1)^2))
            
            % calcul de la perturbation de pression
            % avec (3) et (5)
            %p(j) = p(j-1) - dz(j-1)*dlgrho(j-1)*p(j-2) ...
            %     + 2*dz(j-1)*(i*BigOmega(j-1) - visc*kxy2 + (i*g*dlgrho(j-1))/(BigOmega(j-1)))*w(j-1) ...
            %     + 2*visc*sqrt(rho(j-1))*((w(j) - 2*w(j-1) + w(j-2))/(dz(j-1)));

            % calcul de la perturbation de densité
            %rho1(j) = -i/BigOmega(j)*dlgrho(j)*w(j);
            % }}}

            % FIXME retour à la version non visqueuse pour le moment
            % TODO  if pour intégrer le cas visqueux, sur un critère à déterminer
            
            w(j)    = -i*k*u(j-1)*dz(j-1) + 0.5*dlgrho(j-1)*dz(j-1)*w(j-1) + w(j-1);

            p(j)    = i*BigOmega(j-1)*dz(j-1)*w(j-1) - 0.5*dlgrho(j-1)*dz(j-1)*p(j-1) - rho1(j-1)*dz(j-1)*g + p(j-1);

            u(j)    =  1/BigOmega(j)*(-i*w(j)*alpha + k*p(j));

            rho1(j) = -i/BigOmega(j)*dlgrho(j)*w(j);

            if has_viscosity

                w_old = w(j); p_old = p(j); u_old = u(j); rho1_old = rho1(j);

                % FIXME cas visqueux
                
                % précalculs
                % TODO à faire une fois les formules fixées
                
                % calculs
                
                % même formule, mais u(visc)
                w(j)      = -i*k*u(j-1)*2*dz(j-1) ...
                          + dlgrho(j-1)*dz(j-1)*w(j-1) ...
                          + w(j-2);

                w_diff(j) = w(j) - w_old;
                
                % nouveaux termes
                p_visc(j) = -2*dz(j-1)*w(j-1)*visc*kxy2 ...
                          + (2*visc)/(dz(j-1))*(w(j) - 2*w(j-1) + w(j-2));

                p(j)      = -dlgrho(j-1)*dz(j-1)*p(j-1) ...
                          + 2*dz(j-1)*w(j-1)*i*BigOmega(j-1) ...
                          - rho1(j-1)*2*dz(j-1)*g ...
                          + p(j-2) ...
                          + p_visc(j);

                p_diff(j) = p(j) - p_old;
                
                % nouveaux termes
                u(j)      = ((i*BigOmega(j))/visc - kxy2 + (dz(j-1))^(-2))^(-1) ...
                            * ( alpha/visc*w(j) ...
                                + (i*k)/(visc)*p(j) ...
                                - sqrt(rho(j)*expniphase*((alpha_local(j)-alpha_local(j-2))/(2*dz(j-1)))) ...
                                - (dz(j-1))^(-2)*(u(j-2) - 2*u(j-1)));
                
                u_diff(j) = u(j) - u_old;
                
                % même formule, mais w(u(visc))
                rho1(j)   = -i/BigOmega(j)*dlgrho(j)*w(j);

                rho1_diff(j) = rho1(j) - rho1_old;

                % TODO
                % calculer l'effet visqueux à part et le plotter
                % vérifier son ordre de grandeur et sa dimension analytique
                % changer les fréquences pour voir la dépendance
                
            end

        end % }}}

        % {{{ cas finaux
        % }}}

        % {{{ figures récapitulatives
        
        % bornes supérieures des quantités propagées
        wmax(ik, iw)   = max(abs(real(w)));
        umax(ik, iw)   = max(abs(real(u)));
        pmax(ik, iw)   = max(abs(real(p)));
        rhomax(ik, iw) = max(abs(real(rho1)));
        % nombre d'onde vertical
        KZ(ik, iw, :)  = sqrt(kz2);
        
        % FIXME pas compris
        if max(abs(real(w))) >=  2.
            ctrw(ik, iw) = NaN;
        else
            ctrw(ik, iw) = 1.;
        end

        if sqrt(kz2(j)) >=  2*pi/50.e3
            A(ik, iw) = 1;
        else
            A(ik, iw) = NaN;
        end
        
        % figure principale, dessin des modes dans des subfigures
        figure(100);
        set(100, 'position', [10 1 750 600])
        set(gcf, 'Color', 'w');
        fnt   =  20;
        fnt2  =  18;
        Zmax  =  max(Z);
        Zmin  =  min(Z);

        % perturbation de la vitesse verticale, parties réelles et imaginaires
        subplot(1, 4, 1);
        plot(real(w), Z, 'r', 'linewidth', 2);
        hold on;
        plot(imag(w), Z, 'g', 'linewidth', 2);
        hold off;
        v = axis;
        axis([v(1) v(2) Zmin Zmax])
        xlabel('Vertical V (m/s)', 'fontsize', 12);
        ylabel('Altitude (km)', 'fontsize', 16);
        title(['Period = ', num2str(2*pi/omega/60), ' mn' ' (omega = ', num2str(omega), ' rad/s)'], 'fontsize', 12);

        % perturbation de la vitesse horizontale, parties réelles et imaginaires
        subplot(1, 4, 2);
        plot(real(u), Z, 'r', 'linewidth', 2);
        hold on;
        plot(imag(u), Z, 'g', 'linewidth', 2);
        hold off;
        v = axis;
        axis([v(1) v(2) Zmin Zmax]);
        xlabel('Horizontal V (m/s)', 'fontsize', 12);

        % perturbation de pression, parties réelles et imaginaires
        subplot(1, 4, 3);
        plot(real(p), Z, 'r', 'linewidth', 2);
        hold on;
        plot(imag(p), Z, 'g', 'linewidth', 2);
        hold off;
        v = axis;
        axis([v(1) v(2) Zmin Zmax]);
        xlabel('Pressure (Pa)', 'fontsize', 12);

        % perturbation de la densité, parties réelles et imaginaires
        subplot(1, 4, 4);
        plot(real(rho1), Z, 'r', 'linewidth', 2);
        hold on;
        plot(imag(rho1), Z, 'g', 'linewidth', 2);
        hold off;
        v = axis;
        axis([v(1) v(2) Zmin Zmax]);
        xlabel('Density (kg/m3)', 'fontsize', 12);
        title(['Lambda = ', num2str(round(1/k*1e-3)), ' km'  ' (kx = ',  num2str(k), ' rad/m)'], 'fontsize', 12);
        
        % export TIF
        figure(100);
        F = getframe(gcf);
        [X, Map]  =  frame2im(F);
        file  =  ['mode_L' num2str(round(1/k*1.e-3)) '_T' num2str(2*pi/omega/60) '.tif'];
        imwrite(X, file, 'tif', 'Compression', 'none');
        
        %% paramètres
        %disp('paramètres !');
        %figure(300);
        %% nombres d'onde
        %subplot(1, 3, 1);
        %plot(real(sqrt(kz2)), Z, 'r');
        %hold on;
        %plot(imag(sqrt(kz2)), Z, 'g');
        %xlabel('kz (rad/m)', 'fontsize', 12);
        %ylabel('Altitude (km)', 'fontsize', 16);
        %hold off;
        %% fréquences
        %subplot(1, 3, 2);
        %plot(sqrt(N2), Z, 'r');
        %hold on;
        %v = axis;
        %plot([omega omega], [v(3) v(4)], 'g');
        %hold off;
        %xlabel('N and omega (rad/s)', 'fontsize', 12);
        %% longueurs d'onde
        %subplot(1, 3, 3);
        %plot(2*pi./real(sqrt(kz2))*1.e-3, Z, 'r');
        %hold on;
        %plot(2*pi./imag(sqrt(kz2))*1.e-3, Z, 'g');
        %hold off;
        %xlabel('lambda Z (km)', 'fontsize', 12);

        %pause
        %close
        
        if has_viscosity
            
            % perturbations, parties visqueuses
            figure(500);
            subplot(1,4,1);
            plot(real(w_diff), Z, 'r', 'linewidth', 2);
            hold on;
            plot(imag(w_diff), Z, 'g', 'linewidth', 2);
            hold off;
            v = axis;
            axis([v(1) v(2) Zmin Zmax])
            xlabel('Vertical V, viscosity related (m/s)', 'fontsize', 12);
            ylabel('Altitude (km)', 'fontsize', 16);
            title(['omega =  ', num2str(omega), ' rad/s'], 'fontsize', 12);
            
            subplot(1,4,2);
            plot(real(u_diff), Z, 'r', 'linewidth', 2);
            hold on;
            plot(imag(u_diff), Z, 'g', 'linewidth', 2);
            hold off;
            v = axis;
            axis([v(1) v(2) Zmin Zmax])
            xlabel('Horizontal V (m/s), viscosity related', 'fontsize', 12);

            subplot(1,4,3);
            plot(real(p_diff), Z, 'r', 'linewidth', 2);
            hold on;
            plot(imag(p_diff), Z, 'g', 'linewidth', 2);
            hold off;
            v = axis;
            axis([v(1) v(2) Zmin Zmax])
            xlabel('Pressure (Pa), viscosity related', 'fontsize', 12);
            
            subplot(1, 4, 4);
            plot(real(rho1_diff), Z, 'r', 'linewidth', 2);
            hold on;
            plot(imag(rho1_diff), Z, 'g', 'linewidth', 2);
            hold off;
            v = axis;
            axis([v(1) v(2) Zmin Zmax]);
            xlabel('Density (kg/m3), viscosity related', 'fontsize', 12);
            title(['kx = ',  num2str(k), ' rad/m'], 'fontsize', 12);
                   
        end
        
        % graphs 3D
        % perturbations de la vitesse verticale
        %figure(2*ik);
        %plot3(I*2*pi/omega/60, real(w), Z, 'k');
        %plot3(I*2*pi/omega/60, imag(w), Z, 'r');
        
        %pause
        %close
        
        disp('PRESS ENTER TO CONTINUE...');
        pause
        close

        % next!
        clear w u p rho1 kz2
        
        % }}}
        
    end
    % }}}
end

% }}}

% {{{ post-processing

Nsol = sqrt(N2(1));
Nmax = max(sqrt(N2));
Nmin = min(sqrt(N2));

njump  = 0;
njump2 = size(wmax);

n1 = 1;
n2 = 1;

h = figure;
set(h, 'position', [2 700 800 600]);
set(gcf, 'Color', 'w');
font_size  =  22;
font_sizeN =  18;

flag_plot  =  input('-Plot omega-k or T-lambda ? (0 or 1) ');

subplot(2, 2, 1);
if flag_plot == 0
    pcolor(wn(n1:nt), kx(n2:nlon), log10(wmax(:,1+njump:njump2(2))));
else
    pcolor(2*pi./wn(n1:nt)/60, 2*pi./kx(n2:nlon)*1.e-3, log10(wmax(:,1+njump:njump2(2))));
end
shading flat;
v = axis;
hold on;
plot([Nmax Nmax], [v(3) v(4)], 'k');
plot([Nsol Nsol], [v(3) v(4)], 'k');
plot([Nmin Nmin], [v(3) v(4)], 'k');
colorbar;
title('W_r_e_a_l', 'fontsize', font_size);
if flag_plot == 0
    ylabel('kx (rad/m)', 'fontsize', font_size);
else
    ylabel('lambda (km)', 'fontsize', font_size);
end
set(gca, 'LineWidth', [2])
set(gca, 'fontsize', font_sizeN);

subplot(2, 2, 2);
if flag_plot == 0
    pcolor(wn(n1:nt), kx(n2:nlon), log10(umax(:,1+njump:njump2(2))));
else
    pcolor(2*pi./wn(n1:nt)/60, 2*pi./kx(n2:nlon)*1.e-3, log10(umax(:,1+njump:njump2(2))));
end
shading flat;
v = axis;
hold on;
plot([Nmax Nmax], [v(3) v(4)], 'k');
plot([Nsol Nsol], [v(3) v(4)], 'k');
plot([Nmin Nmin], [v(3) v(4)], 'k');
colorbar;
title('U_r_e_a_l', 'fontsize', font_size);
set(gca, 'LineWidth', [2])
set(gca, 'fontsize', font_sizeN);

subplot(2, 2, 3);
if flag_plot == 0
    pcolor(wn(n1:nt), kx(n2:nlon), log10(pmax(:,1+njump:njump2(2))));
else
    pcolor(2*pi./wn(n1:nt)/60, 2*pi./kx(n2:nlon)*1.e-3, log10(pmax(:,1+njump:njump2(2))));
end
shading flat;
v = axis;
hold on;
plot([Nmax Nmax], [v(3) v(4)], 'k');
plot([Nsol Nsol], [v(3) v(4)], 'k');
plot([Nmin Nmin], [v(3) v(4)], 'k');
colorbar;
if flag_plot == 0
    ylabel('kx (rad/m)', 'fontsize', font_size);
    xlabel('omega (rad/s)', 'fontsize', font_size);
else
    ylabel('lambda (km)', 'fontsize', font_size);
    xlabel('period T (min)', 'fontsize', font_size);
end
title('P_r_e_a_l', 'fontsize', font_size);
set(gca, 'LineWidth', [2])
set(gca, 'fontsize', font_sizeN);

subplot(2, 2, 4);
if flag_plot == 0
    pcolor(wn(n1:nt), kx(n2:nlon), log10(rhomax(:,1+njump:njump2(2))));
else
    pcolor(2*pi./wn(n1:nt)/60, 2*pi./kx(n2:nlon)*1.e-3, log10(rhomax(:,1+njump:njump2(2))));
end
shading flat;
v = axis;
hold on;
plot([Nmax Nmax], [v(3) v(4)], 'k');
plot([Nsol Nsol], [v(3) v(4)], 'k');
plot([Nmin Nmin], [v(3) v(4)], 'k');
colorbar;
if flag_plot == 0
    xlabel('omega (rad/s)', 'fontsize', font_size);
else
    xlabel('period T (min)', 'fontsize', font_size);
end
title('Rho_r_e_a_l', 'fontsize', font_size);
set(gca, 'LineWidth', [2])
set(gca, 'fontsize', font_sizeN);
% }}}

